You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        int high = 0;
        ListNode * node = NULL;
        ListNode * rnode = NULL;
        while(l1 && l2)
        {
            div_t  ret = div((l1->val+l2->val+high), 10);
            int low =  ret.rem;
            high = ret.quot;
           
            l1 = l1->next;
            l2 = l2->next;           
            
            if(node) 
            {
                node->next = new ListNode(low);   
                node = node->next;
            }
            else
            {
               node  = new ListNode(low);
               rnode = node; 
            }
            
        }
         ListNode * pe = nullptr;
         if (l1)
        {
            pe = l1;
        }
        if (l2)
        {
            pe = l2;
        }
    
         while (pe)
        {
            div_t  ret = div((pe->val+high),10);
            int tlow = ret.rem;
            high = ret.quot;
        
            node->next = new ListNode(tlow);   
            node = node->next;

            pe = pe ->next;
        }

        
        if (high>0)
        {
             node->next = new ListNode(high);   
             node = node->next;
        }
        
        return rnode;
    }
};